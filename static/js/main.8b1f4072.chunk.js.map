{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","RegionalSummary","lazy","DailySummary","App","pages","pageLink","view","displayName","animationDelayForNavbar","showInNavbar","className","Helmet","type","JSON","stringify","name","alternateName","url","image","fallback","render","location","Fragment","map","page","index","exact","path","match","key","params","stateCode","to","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,4ICYrCC,EAAkBC,gBAAK,kBAC3B,sDAEIC,EAAeD,gBAAK,kBACxB,sDAmEaE,MAhEf,WAEE,IAAMC,EAAQ,CACZ,CACEC,SAAU,IACVC,KAAMJ,EACNK,YAAa,eACbC,wBAAyB,GACzBC,cAAc,GAEhB,CACEJ,SAAU,mBACVC,KAAMN,EACNO,YAAa,kBACbC,wBAAyB,GACzBC,cAAc,IAYlB,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,KACE,4BAAQC,KAAK,uBACVC,KAAKC,UAbO,CACnB,WAAY,qBACZ,QAAS,MACTC,KAAM,2DACNC,cAAe,mBACfC,IAAK,gCACLC,MAAO,iDAWP,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,yBAAKT,UAAU,UACjC,kBAAC,IAAD,CACEU,OAAQ,gBAAEC,EAAF,EAAEA,SAAF,OACN,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAAQD,SAAUA,GACfjB,EAAMmB,KAAI,SAACC,EAAMC,GAChB,OACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAMH,EAAKnB,SACXe,OAAQ,gBAAEQ,EAAF,EAAEA,MAAF,OACN,kBAACJ,EAAKlB,KAAN,CAAWuB,IAAKD,EAAME,OAAOC,WAAaN,KAE5CI,IAAKJ,OAIX,kBAAC,IAAD,CAAUO,GAAG,eC5DXC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASP,MACvB,2DCZNQ,IAAShB,OACP,kBAAC,IAAMiB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b1f4072.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Suspense, lazy} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Helmet} from 'react-helmet';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nconst RegionalSummary = lazy(() =>\n  import('./component/RegionalSummary' )\n);\nconst DailySummary = lazy(() =>\n  import('./component/DailySummary')\n);\n\nfunction App() {\n\n  const pages = [\n    {\n      pageLink: '/',\n      view: DailySummary,\n      displayName: 'DailySummary',\n      animationDelayForNavbar: 0.2,\n      showInNavbar: true\n    },\n    {\n      pageLink: '/regionalsummary',\n      view: RegionalSummary,\n      displayName: 'RegionalSummary',\n      animationDelayForNavbar: 0.3,\n      showInNavbar: true\n    }  \n  ];\n  const schemaMarkup = {\n    '@context': 'http://schema.org/',\n    '@type': 'NGO',\n    name: 'Coronavirus Outbreak in India: Latest Map and Case Count',\n    alternateName: 'COVID-19 Tracker',\n    url: 'https://www.covid19india.org/',\n    image: 'https://www.covid19india.org/thumbnail.png',\n  };\n  \n  return (\n    <div className=\"App\">\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaMarkup)}\n        </script>\n      </Helmet>\n\n    <Router>\n        <Suspense fallback={<div className=\"lazy\"></div>}>\n          <Route\n            render={({location}) => (\n              <React.Fragment>\n                <Switch location={location}>\n                  {pages.map((page, index) => {\n                    return (\n                      <Route\n                        exact\n                        path={page.pageLink}\n                        render={({match}) => (\n                          <page.view key={match.params.stateCode || index} />\n                        )}\n                        key={index}\n                      />\n                    );\n                  })}\n                  <Redirect to=\"/\" />\n                </Switch>\n              </React.Fragment>\n            )}\n          />\n        </Suspense>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}