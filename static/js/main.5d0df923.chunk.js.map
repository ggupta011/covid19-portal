{"version":3,"sources":["logo.svg","component/RegionalSummary.js","component/DailySummary.js","component/TestSummary.js","component/NotificationSummary.js","component/ContactSummary.js","component/TravelHistorySummary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RegionalSummary","props","state","columnDefs","headerName","field","sortable","filter","rowData","axios","get","then","response","setState","data","regional","catch","error","console","className","style","height","width","align","this","Component","DailySummary","TestSummary","NotificationSummary","notifications","ContactSummary","contacts","TravelHistorySummary","travel_history","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5d0df923.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\n\r\nimport axios from 'axios'\r\n\r\nclass RegionalSummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n            { headerName: \"State/UT\", field: \"loc\", sortable: true, filter: true},\r\n            { headerName: \"Confirmed\", field: \"totalConfirmed\", sortable: true, filter: true },\r\n            { headerName: \"Discharged\", field: \"discharged\", sortable: true, filter: true },\r\n            { headerName: \"Deceased\", field: \"deaths\", sortable: true, filter: true }, \r\n            { headerName: \"regional\", field: \"regional\", sortable: true, filter: true }\r\n        ],\r\n            rowData: []\r\n        }\r\n    }\r\n    componentDidMount ()  {\r\n       axios.get('https://api.rootnet.in/covid19-in/stats/latest')\r\n        .then(response => {\r\n        this.setState({\r\n            rowData: response.data.data.regional  })\r\n        })\r\n        .catch(error => {\r\n            console.error(error)\r\n        })   \r\n    }\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"ag-theme-alpine\"\r\n                style={{\r\n                height: '550px',\r\n                width: '800px',\r\n                align: 'left' }}>\r\n                <AgGridReact\r\n                columnDefs={this.state.columnDefs}\r\n                rowData={this.state.rowData}\r\n                >\r\n                </AgGridReact>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default RegionalSummary","import React, { Component } from 'react'\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\n\r\nimport axios from 'axios'\r\n\r\nclass DailySummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n            { headerName: \"Date\", field: \"day\", sortable: true, filter: true},\r\n            { headerName: \"Total\", field: \"summary.total\", sortable: true, filter: true},\r\n            { headerName: \"Discharged\", field: \"summary.discharged\", sortable: true, filter: true },\r\n            { headerName: \"Deceased\", field: \"summary.deaths\", sortable: true, filter: true }],\r\n            rowData: []\r\n        }\r\n    }\r\n    componentDidMount ()  {\r\n       axios.get('https://api.rootnet.in/covid19-in/stats/history')\r\n        .then(response => {\r\n        this.setState({\r\n            rowData: response.data.data\r\n        })\r\n    })\r\n    .catch(error => {\r\n        console.error(error)\r\n    })\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"ag-theme-alpine\"\r\n                style={{\r\n                height: '550px',\r\n                width: '800px',\r\n                align: 'left' }}\r\n            >\r\n                <AgGridReact\r\n                columnDefs={this.state.columnDefs}\r\n                rowData={this.state.rowData}\r\n                >\r\n                </AgGridReact>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DailySummary","import React, { Component } from 'react'\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\n\r\nimport axios from 'axios'\r\n\r\nclass TestSummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n            { headerName: \"Date\", field: \"timestamp\", sortable: true, filter: true},\r\n            { headerName: \"Total Sample Tested\", field: \"totalSamplesTested\", sortable: true, filter: true},\r\n            { headerName: \"Total Individuals Tested\", field: \"totalIndividualsTested\", sortable: true, filter: true },\r\n            { headerName: \"Positive Cases\", field: \"totalPositiveCases\", sortable: true, filter: true },\r\n            { headerName: \"Source\", field: \"source\", sortable: true, filter: true }],\r\n            rowData: []\r\n        }\r\n    }\r\n    componentDidMount ()  {\r\n       axios.get('https://api.rootnet.in/covid19-in/stats/testing/raw')\r\n        .then(response => {\r\n        this.setState({\r\n            rowData: response.data.data\r\n        })\r\n    })\r\n    .catch(error => {\r\n        console.error(error)\r\n    })\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"ag-theme-alpine\"\r\n                style={{\r\n                height: '550px',\r\n                width: '800px',\r\n                align: 'left' }}\r\n            >\r\n                <AgGridReact\r\n                columnDefs={this.state.columnDefs}\r\n                rowData={this.state.rowData}\r\n                >\r\n                </AgGridReact>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TestSummary","import React, { Component } from 'react'\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\n\r\nimport axios from 'axios'\r\n\r\nclass NotificationSummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n            { headerName: \"Title\", field: \"title\", sortable: true, filter: true},\r\n            { headerName: \"TLink\", field: \"link\", sortable: true, filter: true}],\r\n            rowData: []\r\n        }\r\n    }\r\n    componentDidMount ()  {\r\n       axios.get('https://api.rootnet.in/covid19-in/notifications')\r\n        .then(response => {\r\n        this.setState({\r\n            rowData: response.data.data.notifications\r\n        })\r\n    })\r\n    .catch(error => {\r\n        console.error(error)\r\n    })\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"ag-theme-alpine\"\r\n                style={{\r\n                height: '550px',\r\n                width: '800px',\r\n                align: 'left' }}\r\n            >\r\n                <AgGridReact\r\n                columnDefs={this.state.columnDefs}\r\n                rowData={this.state.rowData}\r\n                >\r\n                </AgGridReact>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default NotificationSummary","import React, { Component } from 'react'\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\n\r\nimport axios from 'axios'\r\n\r\nclass ContactSummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n            { headerName: \"Location\", field: \"loc\", sortable: true, filter: true},\r\n            { headerName: \"Number\", field: \"number\", sortable: true, filter: true}],\r\n            rowData: []\r\n        }\r\n    }\r\n    componentDidMount ()  {\r\n       axios.get('https://api.rootnet.in/covid19-in/contacts')\r\n        .then(response => {\r\n        this.setState({\r\n            rowData: response.data.data.contacts.regional\r\n        })\r\n    })\r\n    .catch(error => {\r\n        console.error(error)\r\n    })\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"ag-theme-alpine\"\r\n                style={{\r\n                height: '550px',\r\n                width: '800px',\r\n                align: 'left' }}\r\n            >\r\n                <AgGridReact\r\n                columnDefs={this.state.columnDefs}\r\n                rowData={this.state.rowData}\r\n                >\r\n                </AgGridReact>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ContactSummary","import React, { Component } from 'react'\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport 'ag-grid-enterprise';\r\n\r\nimport axios from 'axios'\r\n\r\nclass TravelHistorySummary extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          columnDefs: [\r\n            { headerName: \"Seq\", field: \"_cn6ca\", sortable: true, filter: true},\r\n            { headerName: \"Accuracy Location\", field: \"accuracylocation\", sortable: true, filter: true},\r\n            { headerName: \"Address\", field: \"address\", sortable: true, filter: true},\r\n            { headerName: \"Datasource\", field: \"datasource\", sortable: true, filter: true},\r\n            { headerName: \"Latlong\", field: \"latlong\", sortable: true, filter: true},\r\n            { headerName: \"Mode of travel\", field: \"modeoftravel\", sortable: true, filter: true},\r\n            { headerName: \"PID\", field: \"pid\", sortable: true, filter: true},\r\n            { headerName: \"Place Name\", field: \"placename\", sortable: true, filter: true},\r\n            { headerName: \"Time from\", field: \"timefrom\", sortable: true, filter: true},\r\n            { headerName: \"Time to\", field: \"timeto\", sortable: true, filter: true},\r\n            { headerName: \"type\", field: \"type\", sortable: true, filter: true}],\r\n            rowData: []\r\n        }\r\n    }\r\n    componentDidMount ()  {\r\n       axios.get('https://api.covid19india.org/travel_history.json')\r\n        .then(response => {\r\n        this.setState({\r\n            rowData: response.data.travel_history\r\n        })\r\n    })\r\n    .catch(error => {\r\n        console.error(error)\r\n    })\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"ag-theme-alpine\"\r\n                style={{\r\n                height: '550px',\r\n                width: '800px',\r\n                align: 'left' }}\r\n            >\r\n                <AgGridReact\r\n                columnDefs={this.state.columnDefs}\r\n                rowData={this.state.rowData}\r\n                >\r\n                </AgGridReact>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TravelHistorySummary","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RegionalSummary from './component/RegionalSummary';\nimport DailySummary from './component/DailySummary';\nimport TestSummary from './component/TestSummary';\nimport NotificationSummary from './component/NotificationSummary';\nimport ContactSummary from './component/ContactSummary';\nimport TravelHistorySummary from './component/TravelHistorySummary';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n      <RegionalSummary/>\n      <DailySummary />\n      <TestSummary/>\n      <NotificationSummary/>\n      <ContactSummary />\n      <TravelHistorySummary/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}